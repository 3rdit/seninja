{
   "pluginmetadataversion": 2,
   "name": "SENinja",
   "author": "Luca Borzacchiello",
   "type": [
      "helper"
   ],
   "api": [
      "python3"
   ],
   "description": "Symbolic execution plugin for BinaryNinja",
   "longdescription": "# SENinja - Symbolic Execution Plugin for Binary Ninja\n\n![](https://github.com/borzacchiello/seninja/raw/master/media/pictures/screenshot.png)\nThis is a binary ninja plugin that implements a symbolic execution engine based only on z3, highly inspired by the _angr framework_ (https://angr.io/). \nThe plugin is implemented as an emulator of LLIL instructions that builds and manipulates z3 formulas.\n\nSENinja simulates a debugger: the execution is _path driven_, only one state is _active_ and executes instructions. The other states, generated at branches, are saved in a _deferred queue_. At any time, the active state can be changed with a deferred one.\n\n### UI Widgets\n\nSENinja comes with a side-panel widget that can be used to start and control the execution using the following buttons:\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/start.svg\" alt=\"\" width=\"10\"/>: start the execution\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/stepinto.svg\" alt=\"\" width=\"10\"/>: step the current state\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/run_branch.svg\" alt=\"\" width=\"10\"/>: run until branch\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/run_addr.svg\" alt=\"\" width=\"10\"/>: execute the current state until the currently selected address\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/run_dfs.svg\" alt=\"\" width=\"10\"/>: start a DFS search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/run_bfs.svg\" alt=\"\" width=\"10\"/>: start a BFS search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/set_target.svg\" alt=\"\" width=\"10\"/>: set the currently selected address as the target of the search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/set_avoid.svg\" alt=\"\" width=\"10\"/>: avoid the currently selected address during a search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/reset_searchers.svg\" alt=\"\" width=\"10\"/>: reset targets and avoid addresses\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/stop.svg\" alt=\"\" width=\"10\"/>: stop a search\n- <img src=\"https://github.com/borzacchiello/seninja/raw/master/media/icons/cancel.svg\" alt=\"\" width=\"10\"/>: reset SENinja\n",
   "license": {
      "name": "2-Clause BSD",
      "text": "Copyright 2019-2024 Luca Borzacchiello\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
   },
   "platforms": [
      "Darwin",
      "Windows",
      "Linux"
   ],
   "installinstructions": {
      "Darwin": "Install `z3-solver` using pip: `pip install z3-solver`",
      "Windows": "Install `z3-solver` using pip: `pip install z3-solver`",
      "Linux": "Install `z3-solver` using pip: `pip install z3-solver`"
   },
   "dependencies": {
		"apt": [],
		"installers": [],
		"other": []
	},
   "version": "0.5.0",
   "minimumbinaryninjaversion": 3500
}
